# This YAML file is refered to
# https://youtu.be/RgZyX-e6W9E?si=iISxsuXEZKma4SVv
# https://youtu.be/Tx1UElRhELg?si=MrbyhgWCwlGVtgyD

name: Docker Image CI for GitHub Container Registry (GHCR)

on:
  push:
    tags:
      - '*'  # Triggered on new tag
  # schedule:
  #   - cron: '0 0 2 * *'  # Runs at 00:00 on the 2nd of every month

env:
  # Use docker.io for Docker Hub if empty
  # Here we use GitHub Container Registry (GHCR) to store our images
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  # IMAGE_NAME: ${{ github.repository }}  # This will have problem with uppercase
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image

    steps:
    # We need to free some space to build this large image.
      # https://stackoverflow.com/questions/75536771/github-runner-out-of-disk-space-after-building-docker-image
      # https://github.com/apache/flink/blob/02d30ace69dc18555a5085eccf70ee884e73a16e/tools/azure-pipelines/free_disk_space.sh
      # Add || true will ignore exit code error.
      - name: Check initial disk space
        run: df -h

      - name: Free disk space
        run: |
          sudo docker rmi $(docker image ls -aq) > /dev/null 2>&1 || true
          sudo rm -rf \
            /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
            /usr/lib/jvm || true
          echo "some directories deleted"
          sudo apt install aptitude -y > /dev/null 2>&1
          sudo aptitude purge aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org azure-cli microsoft-edge-stable \
            -y -f > /dev/null 2>&1
          sudo aptitude purge google-cloud-sdk -f -y > /dev/null 2>&1
          sudo aptitude purge microsoft-edge-stable -f -y > /dev/null 2>&1 || true
          sudo apt purge microsoft-edge-stable -f -y > /dev/null 2>&1 || true
          sudo aptitude purge '~n ^mysql' -f -y > /dev/null 2>&1
          sudo aptitude purge '~n ^php' -f -y > /dev/null 2>&1
          sudo aptitude purge '~n ^dotnet' -f -y > /dev/null 2>&1
          sudo apt install cmake -y > /dev/null 2>&1
          sudo apt-get autoremove -y > /dev/null 2>&1
          sudo apt-get autoclean -y > /dev/null 2>&1
          echo "some packages purged"

          echo "=============================================================================="
          echo "Freeing up disk space on CI system"
          echo "=============================================================================="

          echo "Listing 100 largest packages"
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
          df -h
          echo "Removing large packages"
          sudo apt-get remove -y '^ghc-8.*' || true
          sudo apt-get remove -y '^dotnet-.*' || true
          sudo apt-get remove -y '^llvm-.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          df -h
          echo "Removing large directories"
          rm -rf /usr/share/dotnet/ || true
          df -h

      # This is going to pull our code from the repository
      # into the actions runner in order to build the image
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # This is going to set CPU thread into the environment variable
      # Check if THREADS is a valid integer, otherwise set to 4
      - name: Set THREADS environment variable
        id: cpu-threads
        run: |
          THREADS=$(nproc)
          if ! [[ "$THREADS" =~ ^[0-9]+$ ]]; then
            THREADS=4
          fi
          echo "THREADS=$THREADS" >> $GITHUB_ENV
          echo "Using $THREADS CPU threads"

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        # Choose one method
        # 1. Use login-action
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          # password: ${{ secrets.GITHUB_TOKEN }}  # You can use the default GitHub token
          password: ${{ secrets.DOCKER_PAT }}  # Or you can use your pre-generated Personal Access Token
        # 2. Use command line
        # run: |
        #   docker login ${{ env.REGISTRY }} --username ${{ github.actor }} --password ${{ secrets.DOCKER_PAT }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # - name: Determine Image Tag
      #   id: tag
      #   run: |
      #     if [[ "${{ github.event_name }}" == "push" ]]; then
      #       # Triggered by a tag, use the tag name
      #       echo "TAG=${{ github.ref_name }}"  # For debugging
      #       echo "TAG=${{ github.ref_name }}" >> $GITHUB_ENV
      #     else
      #       # Triggered by schedule, use 'latest' and append the date
      #       latest_tag=$(git describe --tags --abbrev=0)
      #       date_tag=$(date +%Y%m%d)
      #       echo "TAG=${latest_tag}-${date_tag}"  # For debugging
      #       echo "TAG=${latest_tag}-${date_tag}" >> $GITHUB_ENV
      #     fi

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        # Choose one method
        # 1. Use build-push-action
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          # tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }} , ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          # tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }} , ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} , ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            THREADS=${{ env.THREADS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # TODO: Improve pipeline with https://docs.docker.com/build/ci/github-actions/multi-platform/
          platforms: linux/arm64,linux/amd64  # ,linux/arm/v7
        # 2. Use command lines
        # run: docker buildx build --platform linux/amd64,linux/arm64 -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }} -f ./Dockerfile --push .
